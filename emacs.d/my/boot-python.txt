import sys
import traceback
import types
from importlib import reload

try:
    import pprintpp
    pprintpp.monkeypatch()
except ImportError:
    pass


def sc_spy(*values):
    try:
        raise Exception
    except Exception:
        tb = traceback.format_stack()
    where = tb[-2]
    sc._contexts.append(values)
    print("SPY {}{}".format(sc._n, where))
    sc._n += 1


def sc_getc(n):
    return sc._contexts[n]


sc = types.ModuleType("sc")
sc._n = 0
sc._contexts = []
sc.spy = sc_spy
sc.getc = sc_getc
sys.modules["sc"] = sc


def apropos(term):
    lterm = term.lower()
    name_modules = sorted((name, module)
                          for name, module in sys.modules.items()
                          if module is not None)
    for name, module in name_modules:
        for attr in sorted(dir(module)):
            if not attr.startswith("_") and lterm in attr.lower():
                print("{}.{}".format(name, attr))
